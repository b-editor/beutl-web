datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model User {
  id            String          @id @default(uuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  SocialProfile      SocialProfile[]
  Profile            Profile?
  File               File[]
  ConfirmationToken  ConfirmationToken[]
  Package            Package[]
  UserPackage        UserPackage[]
  NativeAppAuth      NativeAppAuth[]
  UserPaymentHistory UserPaymentHistory[]
  Customer           Customer?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken")
  access_token      String? @map("accessToken")
  expires_at        Int?    @map("expiresAt")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken")
  session_state     String? @map("sessionState")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum ConfirmationTokenPurpose {
  EMAIL_UPDATE
  ACCOUNT_DELETE
}

model ConfirmationToken {
  userId     String
  identifier String
  token      String
  expires    DateTime
  purpose    ConfirmationTokenPurpose
  user       User                     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String    @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  usedAt               DateTime?
  name                 String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Profile {
  userId      String
  userName    String
  displayName String
  bio         String?
  iconFileId  String?

  user     User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  iconFile File? @relation(fields: [iconFileId], references: [id], onDelete: SetNull)

  @@id([userId])
}

model SocialProfile {
  value      String
  userId     String
  providerId String

  provider SocialProfileProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  user     User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, providerId])
}

model SocialProfileProvider {
  id            String          @id @default(uuid())
  provider      String
  name          String
  urlTemplate   String
  SocialProfile SocialProfile[]
}

model File {
  id         String         @id @default(uuid())
  name       String
  size       BigInt
  mimeType   String
  objectKey  String
  userId     String
  sha256     String?
  visibility FileVisibility
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  Package           Package[]
  PackageScreenshot PackageScreenshot[]
  Release           Release[]
  Profile           Profile[]
  CompatFile        CompatFile?
}

enum FileVisibility {
  PUBLIC
  PRIVATE
  DEDICATED
}

model Package {
  id               String           @id @default(uuid())
  name             String           @unique
  displayName      String?
  description      String
  shortDescription String
  published        Boolean
  webSite          String
  tags             String[]
  iconFileId       String?
  userId           String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  interval         PaymentInterval?

  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  iconFile          File?               @relation(fields: [iconFileId], references: [id], onDelete: SetNull)
  UserPackage       UserPackage[]
  PackageScreenshot PackageScreenshot[]
  Release           Release[]
  CompatPackage     CompatPackage?
  packagePricing    PackagePricing[]
}

model PackagePricing {
  id        String   @id @default(uuid())
  packageId String
  price     Int
  currency  String
  fallback  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  package Package @relation(fields: [packageId], references: [id], onDelete: Cascade)
}

enum PaymentInterval {
  ONCE
  MONTHLY
  YEARLY
}

model UserPaymentHistory {
  id        String   @id @default(uuid())
  userId    String
  paymentId String
  packageId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Customer {
  userId    String   @id
  stripeId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PackageScreenshot {
  packageId String
  fileId    String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  package Package @relation(fields: [packageId], references: [id], onDelete: Cascade)
  file    File    @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@id([packageId, fileId])
}

model UserPackage {
  userId    String
  packageId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  package Package @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@id([userId, packageId])
}

model Release {
  id            String   @id @default(uuid())
  packageId     String
  version       String
  targetVersion String
  title         String
  description   String
  fileId        String?
  published     Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  package       Package        @relation(fields: [packageId], references: [id], onDelete: Cascade)
  file          File?          @relation(fields: [fileId], references: [id], onDelete: SetNull)
  CompatRelease CompatRelease?
}

model CompatPackage {
  id        BigInt @id @default(autoincrement())
  packageId String @unique

  package Package @relation(fields: [packageId], references: [id], onDelete: Cascade)
}

model CompatRelease {
  id        BigInt @id @default(autoincrement())
  releaseId String @unique

  release Release @relation(fields: [releaseId], references: [id], onDelete: Cascade)
}

model CompatFile {
  id     BigInt @id @default(autoincrement())
  fileId String @unique

  file File @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model NativeAppAuth {
  id          String    @id @default(uuid())
  continueUrl String
  sessionId   String    @default(uuid())
  userId      String?
  code        String?
  codeExpires DateTime?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}
